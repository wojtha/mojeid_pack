<?php

/**
 * @file
 * mojeID module adds mojeID branding to Drupal openid forms and adds some
 * features for better integration with the mojeID provider.
 *
 * Read more about mojeID (the OpenID provider ) - http://mojeid.cz/
 *
 * @author Vojtech Kusy - http://vojtechkusy.com/
 *
 * CREDITS
 *  - Initial development sponsored by NIC.CZ - http://www.nic.cz/
 *  - Developed by Ants! - http://atomicant.co.uk/
 */

//=============================================================================
//  DRUPAL HOOKS
//=============================================================================


/**
 * Implementation of hook_perm().
 */
function mojeid_perm() {
  return array('administer mojeid');
}

/**
 * Implementation of hook_menu().
 */
function mojeid_menu() {
  $items = array();

  $items['admin/settings/mojeid'] = array(
    'title' => 'mojeID settings',
    'description'  => 'Configure mojeID settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mojeid_admin_settings'),
    'access arguments' => array('administer mojeid'),
    'file' => 'mojeid.admin.inc',
  );

  $items['admin/settings/mojeid/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -2,
  );

  $items['openid/xrds.xml'] = array(
    'title' => 'OpenID XRDS',
    'page callback' => 'mojeid_xrds_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'mojeid.inc',
  );

  return $items;
}

/**
 * Implementation of hook_help().
 */
function mojeid_help($path, $arg) {
  switch ($path) {
    case 'user/%/openid':
      $output = '<p>' . t('This site supports <a href="@moje-id-cz">mojeID</a>, which adds some more features to OpenID protocol.', array('@moje-id-cz' => 'http://mojeid.cz')) . '</p>';
      $output .= '<p>' . t('If you already have a mojeID, enter the URL to your mojeID server below (e.g. myusername.mojeid.cz). Next time you login, you will be able to use this URL instead of a regular username and password.') . '</p>';
      return $output;

    case 'admin/help#openid':
      $output = '<p>' . t('This site supports <a href="@moje-id-cz">mojeID</a>, which adds some more features to OpenID protocol.', array('@moje-id-cz' => 'http://mojeid.cz')) . '</p>';
      $output .= '<p>' . t('If you already have a mojeID, enter the URL to your mojeID server below (e.g. myusername.mojeid.cz). Next time you login, you will be able to use this URL instead of a regular username and password.') . '</p>';
      $output .= '<p>' . t('The basic concept of the mojeID usage is the same as with OpenID described above.') . '</p>';
      $output .= '<p>' . t('More information on mojeID (e.g. how it differs from regular OpenID) is available at <a href="@moje-id-cz">mojeID</a> (the site is in Czech and English).', array('@moje-id-cz' => 'http://mojeid.cz')) . '</p>';
      return $output;
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * Adds OpenID selector to the OpenID forms.
 */
function mojeid_form_alter(&$form, &$form_state, $form_id) {
  if (!in_array($form_id, array('user_login_block', 'user_login', 'user_register', 'openid_user_add'))) {
    // Skip other forms
    return;
  }

  module_load_include('inc', 'mojeid');
  _mojeid_form_alter($form, $form_state, $form_id);
}

/**
 * Implementation of hook_openid()
 */
function mojeid_openid($op, $request = array()) {
  // Add our information to the request if op is request and we are enabled.
  if ($op == 'request') {
    if (strpos($request['openid.identity'], 'mojeid.cz') !== FALSE) {
      // authentication policy
      $request['openid.ns.pape'] = 'http://specs.openid.net/extensions/pape/1.0';
      // max age of the last autentization
      $request['openid.pape.max_auth_age'] = 3600;
      // see http://schemas.openid.net/pape/policies/2007/06/phishing-resistant
      $request['openid.pape.preferred_auth_policies'] = '';

      //$request['openid.claimed_id'] = 'http://specs.openid.net/auth/2.0/identifier_select';

      // Add required AX elements
      if (module_exists('openid_client_ax')) {
        $ax = variable_get('openid_client_ax_alias', 'ax');
        $required = array_filter(variable_get('mojeid_required', array()));
        foreach ($required as $required_key => $required_element) {
          // Remove required elements which aren't used in the request
          $ax_element = sprintf('openid.%s.type.%s', $ax, $required_element);
          if (empty($request[$ax_element])) {
            unset($required[$required_key]);
          }
        }
        if (!empty($required)) {
          $request[sprintf('openid.%s.required', $ax)] = implode(',', $required);
        }
      }

      return $request;
    }
  }
}

/**
 * Implementation of hook_openid_ax_schema(); OpenID Client AX mdoule.
 *
 * Create an array containing the MojeID identifiers NOT listed in AX
 * http://www.axschema.org/types/
 *
 * Similar to openid_client_ax_schema_definitions()
 *
 * @return
 *   Array containing the schema definitions
 */
function mojeid_openid_client_ax_schema() {
  module_load_include('inc', 'mojeid');
  return _mojeid_openid_client_ax_schema();
}

/**
 * Implementation of hook_xrds(); Simple XRDS module.
 *
 * Return a XRDS for Attribute Exchange service discovery.
 */
/*function mojeid_xrds($account = NULL) {
  $xrds = array();
  $xrds['mojeid'] = array(
    'services' => array(
      array(
        'priority' => 10,
        'data' => array(
          'Type' => array('http://specs.openid.net/auth/2.0/return_to'),
          'URI' => array(url('', array('absolute' => TRUE))),
         ),
      )
    )
  );

  return $xrds;
}*/

