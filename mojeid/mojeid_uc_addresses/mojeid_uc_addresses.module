<?php

/**
 * @file
 * mojeID and UC Addresses integration
 *
 * @author Vojtech Kusy - http://vojtechkusy.com
 */

/**
 * MOJEID ADDRESSES TYPES
 */
define('UC_ADDRESS_MOJEID_HOME', 'mojeID Home');
define('UC_ADDRESS_MOJEID_BILLING', 'mojeID Billing');
define('UC_ADDRESS_MOJEID_SHIPPING', 'mojeID Shipping');

define('UC_ADDRESS_MOJEID_ADDED', 1);
define('UC_ADDRESS_MOJEID_UPDATED', 2);

//=============================================================================
//  DRUPAL HOOKS
//=============================================================================

/**
 * Implementation of hook_menu().
 */
function mojeid_uc_addresses_menu() {
  $items = array();

  $items['admin/settings/mojeid/uc_addresses'] = array(
    'title' => 'UC Addresses',
    'description'  => 'Configure mojeID settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mojeid_uc_addresses_admin_settings'),
    'access arguments' => array('administer mojeid'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function mojeid_uc_addresses_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'uc_addresses_get_address_form') {
    // Prevent user from editing the mojeID address name when the user has some
    // active mojeID account.
    $uid = $form['stored_values']['#value']['user']->uid;
    $is_mojeid_address = in_array($form['panes']['address']['address_name']['#default_value'], array(UC_ADDRESS_MOJEID_HOME, UC_ADDRESS_MOJEID_BILLING, UC_ADDRESS_MOJEID_SHIPPING));
    if ($is_mojeid_address && mojeid_uc_addresses_mojeid_exists($uid)) {
      $address = &$form['panes']['address'];
      $address['address_name_preview'] = $address['address_name'];
      // TODO: use theme function to translate
      $address['address_name_preview']['#default_value'] = $address['address_name']['#default_value'];
      $address['address_name_preview']['#disabled'] = TRUE;
      $address['address_name_preview']['#description'] .= '<br/><strong>' . t("mojeID address name can't be changed.") . '</strong>';

      $address['address_name'] = array(
        '#type' => 'value',
        '#value' => $address['address_name']['#default_value'],
      );

      if (isset($address['address_name']['aid'])) {
        $address['address_name']['aid']['#type'] = 'value';
      }
    }
  }
  elseif ($form_id == 'mojeid_admin_settings') {

  }
}

/**
 * Implementation of hook_openid_client()
 *
 * For inspiration look to the openid_cp_field_openid_client()
 * openid_client_ax module must be enabled
 *
 * @see openid_client_ax_openid()
 */
function mojeid_uc_addresses_openid_client($op, $response = NULL, $account = NULL) {
  switch ($op) {
    case 'get':
      return mojeid_uc_addresses_mappings();
    case 'save':
    case 'add':
      _mojeid_uc_addresses_openid_client_save($response, $account);
  }
}

/**
 * Helper function which handles OpenID response save
 *
 * @param type $response
 * @param type $account
 *
 * @return type
 */
function _mojeid_uc_addresses_openid_client_save($response, $account) {
  // If a profile already exists with any valid profile type, do nothing (deprecated).
  /*if (mojeid_uc_addresses_get_address($account->uid)) {
    return;
  }*/

  if (!($addresses = mojeid_uc_addresses_get_address($account->uid))) {
    $addresses = array();
  }

  $mapping = mojeid_uc_addresses_mappings();
  $key_map = array_map('openid_client_ax_attribute_name', $mapping);
  $temp_values = mojeid_uc_addresses_get_values($response, array_values($key_map));
  $values = array();
  // TODO: Iterate through either $key_map or $temp_values?
  foreach ($key_map as $key => $tkey) {
    $values[$key] = !empty($temp_values[$tkey][0]) ? $temp_values[$tkey][0] : '';
  }

  if (!empty($values)) {
    $added_addresses = array();

    // Home address
    $address = new stdClass();
    $address->address_name = UC_ADDRESS_MOJEID_HOME;
    $address->uid = $account->uid;
    $address->first_name = $values['first_name'];
    $address->last_name = $values['last_name'];
    $address->company = $values['company'];
    $address->phone = $values['phone'];
    $address->street1 = $values['street1'];
    $address->street2 = $values['street2'];
    $address->city = $values['city'];
    $address->postal_code = $values['postal_code'];
    $address->country = $values['country'];
    $address->zone = $values['zone'];
    $address->is_default = 1;

    $result = mojeid_uc_addresses_save($address, $addresses);
    if ($result == UC_ADDRESS_MOJEID_ADDED) {
      $added_addresses[] = $address->address_name;
    }

    $billing_address = clone $address;
    $billing_address->address_name = UC_ADDRESS_MOJEID_BILLING;
    $billing_address->street1 = $values['billing_street1'];
    $billing_address->street2 = $values['billing_street2'];
    $billing_address->city = $values['billing_city'];
    $billing_address->postal_code = $values['billing_postal_code'];
    $billing_address->country = $values['billing_country'];
    $billing_address->zone = $values['billing_zone'];
    $billing_address->is_default = 0;

    $result = mojeid_uc_addresses_save($billing_address, $addresses);
    if ($result == UC_ADDRESS_MOJEID_ADDED) {
      $added_addresses[] = $billing_address->address_name;
    }

    $shipping_address = clone $address;
    $shipping_address->address_name = UC_ADDRESS_MOJEID_SHIPPING;
    $shipping_address->street1 = $values['shipping_street1'];
    $shipping_address->street2 = $values['shipping_street2'];
    $shipping_address->city = $values['shipping_city'];
    $shipping_address->postal_code = $values['shipping_postal_code'];
    $shipping_address->country = $values['shipping_country'];
    $shipping_address->zone = $values['shipping_zone'];
    $shipping_address->is_default = 0;

    $result = mojeid_uc_addresses_save($shipping_address, $addresses);
    if ($result == UC_ADDRESS_MOJEID_ADDED) {
      $added_addresses[] = $shipping_address->address_name;
    }

    if ($count = count($added_addresses)) {
      drupal_set_message(format_plural($count, '1 UC address successfully added: %addresses.', '@count UC addresses successfully added: %addresses.', array('%addresses' => implode(', ', $added_addresses))));
    }
  }
}

function mojeid_uc_addresses_save(stdClass $address, $addresses) {
  $status = FALSE;

  if (mojeid_uc_addresses_is_empty($address)) {
    drupal_set_message(t("Address %address can't be saved because required values street and/or city are missing.", array('%address' => $address->address_name)), 'warning');
    return FALSE;
  }

  // Convert country code from ISO-2 to Numeric-3
  if ($code = mojeid_uc_addresses_supported_country($address->country)) {
    $address->country = $code;
    // Update
    if ($aid = mojeid_uc_addresses_address_name_exists($addresses, $address->address_name)) {
      $address->aid = $aid;
      if (mojeid_uc_addresses_update_address($address)) {
        $status = UC_ADDRESS_MOJEID_UPDATED;
      }
    }
    // Add
    elseif (mojeid_uc_addresses_add_address($address)) {
      $status =  UC_ADDRESS_MOJEID_ADDED;
    }
  }
  else {
    drupal_set_message(t("Address %address can't be saved because it contains unsupported country.", array('%address' => $address->address_name)), 'warning');
  }

  return $status;
}

/**
 * Checks if exists any mojeID account for the given User ID.
 *
 * @param int $uid
 * 	The user ID.
 *
 * @return boolean
 */
function mojeid_uc_addresses_mojeid_exists($uid) {
  static $mojeid_users = array();

  if (!$uid) {
    return FALSE;
  }

  if (!isset($mojeid_users[$uid])) {
    $mojeid_users[$uid] = (bool) db_result(db_query("SELECT aid FROM authmap WHERE uid=%d AND module='openid' AND authname LIKE '%.mojeid.cz/%'", $uid));
  }

  return $mojeid_users[$uid];
}

/**
 * Check if the address has main attributes.
 *
 * @param type $address
 *
 * @return boolean
 */
function mojeid_uc_addresses_is_empty($address) {
  return empty($address->street1) && empty($address->city);
}

/**
 * Check if the address has all required attributes.
 *
 * @param type $address
 *
 * @return boolean
 */
function mojeid_uc_addresses_is_uc_valid($address) {
  static $required = NULL;
  $valid = TRUE;

  // @see uc_get_field_name()
  $fields = array(
    'first_name' => t('First name'),
    'last_name' => t('Last name'),
    'email' => t('E-mail'),
    'phone' => t('Phone number'),
    'company' => t('Company'),
    'address' => t('Address'),
    'street' => t('Street address'),
    'street1' => t('Street address 1'),
    'street2' => t('Street address 2'),
    'city' => t('City'),
    'zone' => t('State/Province'),
    'postal_code' => t('Postal code'),
    'country' => t('Country'),
  );

  if (is_null($required)) {
    $required = array();
    foreach ($fields as $key => $label) {
      if (uc_address_field_enabled($key) && uc_address_field_required($key)) {
        $required[$key] = $label;
      }
    }
  }

  foreach ($required as $field => $label) {
    if (!isset($address->{$field}) || strlen(trim($address->{$field})) == 0) {
      $valid = FALSE;
      drupal_set_message(t('Field @label is invalid at @address_type address. Address will not be saved.', array('@label' => $label, '@address' => $address->address_name)), 'warning');
      break;
    }
  }

  // TODO: check if country and zone are in right format (iso2, iso3, ...)

  return $valid;
}

/**
 * Helper function which returns values for given attributtes
 *
 * @param array $response
 * @param array $attributes
 *
 * @return array
 *   Associative nested array of the attributes values
 */
function mojeid_uc_addresses_get_values($response, $attributes) {
  $return = array();
  $ax = variable_get('openid_client_ax_alias', 'ax');
  $attributes = (array) $attributes;

  foreach ($attributes as $attribute) {
    // single value format
    if (!empty($response[sprintf('openid.%s.value.%s', $ax, $attribute)])) {
      $return[$attribute][] = $response[sprintf('openid.%s.value.%s', $ax, $attribute)];
    }
    // multiple value format
    elseif (!empty($response[sprintf('openid.%s.count.%s', $ax, $attribute)])) {
      $count = $response[sprintf('openid.%s.count.%s', $ax, $attribute)];
      for ($i = 1; $i <= $count; ++$i) {
        if (!empty($response[sprintf('openid.%s.value.%s.%d', $ax, $attribute, $i)])) {
          $return[$attribute][] = $response[sprintf('openid.%s.value.%s.%d', $ax, $attribute, $i)];
        }
      }
    }
  }

  return $return;
}

/**
 * Returns user identities bound to given UID
 *
 * @param int $uid
 *
 * @return array
 *   Array of user identities objects
 */
function mojeid_uc_addresses_get_user_openid($uid) {
  $rows = array();
  $result = db_query("SELECT * FROM {authmap} WHERE module='openid' AND uid=%d", $uid);
  while ($identity = db_fetch_object($result)) {
    $rows[] = $identity;
  }
  return $rows;
}

/**
 * Returns user identity identified by UID and authname
 *
 * @param int $uid
 * @param string $authname
 *
 * @return object
 *   Identity object
 */
function mojeid_uc_addresses_get_user_openid_authname($uid, $authname) {
  $identity = NULL;
  $result = db_query("SELECT * FROM {authmap} WHERE module='openid' AND uid=%d AND authname='%s'", $uid, $authname);
  if ($result) {
    $identity = db_fetch_object($result);
  }
  return $identity;
}

/**
 * Wrapper function which adds an UC address to the database
 *
 * @param object $address
 *
 * @return int
 *   An ID of the address.
 */
function mojeid_uc_addresses_add_address($address) {
  $aid = FALSE;
  if (_uc_addresses_db_check_address($address, 'add', TRUE)) {
    $aid = _uc_addresses_db_add_address($address, TRUE);
  }
  return $aid;
}

/**
 * Wrapper function which updates an UC address
 *
 * @param object $address
 *
 * @return boolean
 */
function mojeid_uc_addresses_update_address($address) {
  $aid = FALSE;
  if (_uc_addresses_db_check_address($address, 'update', TRUE)) {
    $aid = _uc_addresses_db_update_address($address);
  }
  return $aid;
}

/**
 * Wrapper function which get an UC address or list of UC addresses from the database.
 *
 * @param int $uid
 *   User ID
 *
 * @return
 *  An array of objects if $aid was NULL. FALSE on error.
 */
function mojeid_uc_addresses_get_address($uid) {
  return _uc_addresses_db_get_address($uid);
}

/**
 * Check if user has address with this name
 *
 * @param string $name
 * @param array $addresses
 *
 * @return int|FALSE
 *   AID if address with given name exists in the array, otherwise FALSE
 */
function mojeid_uc_addresses_address_name_exists($addresses, $name) {
  foreach ((array) $addresses as $address) {
    if ($address->address_name == $name) {
      return $address->aid;
    }
  }
  return FALSE;
}

/**
 * Helper function which builds array of address fields based on type.
 *
 * @param string $type
 *   Type of address 'common', 'home', 'billing', 'shipping'
 *
 * @return array
 *   Array or FALSE
 */
function mojeid_uc_addresses_get_fields($type = 'common') {
  $common = array(
    'street1',
    'street2',
    'city',
    'zone',
    'postal_code',
    'country',
    'phone',
  );

  if ($type == 'common') {
    return $common;
  }
  elseif ($type == 'home') {
    return array_merge(array(
      'first_name',
      'last_name',
      'company',
     ), $common);
  }
  elseif (in_array($type, array('billing', 'shipping'))) {
    foreach ($common as &$field) {
      $field = $type .'_'. $field;
    }
    return $common;
  }

  return FALSE;
}

/**
 * Address elements => OpenID URI mapping
 *
 * @return array
 */
function mojeid_uc_addresses_mappings() {
  $mappings = array();
  $enabled = array_filter(variable_get('mojeid_uc_addresses', array()));

  if (!empty($enabled)) {
    $mappings = array(
      'first_name' => 'http://axschema.org/namePerson/first',
      'last_name' => 'http://axschema.org/namePerson/last',
      'company' => 'http://axschema.org/company/name',
      'phone' => 'http://axschema.org/contact/phone/default',
    );

    if (!empty($enabled['main'])) {
      $mappings = array_merge($mappings, array(
        'street1' => 'http://axschema.org/contact/postalAddress/home',
        'street2' => 'http://axschema.org/contact/postalAddressAdditional/home',
        'city' => 'http://axschema.org/contact/city/home',
        'postal_code' => 'http://axschema.org/contact/postalCode/home',
        'country' => 'http://axschema.org/contact/country/home',
        'zone' => 'http://axschema.org/contact/state/home',
      ));
    }

    if (!empty($enabled['billing'])) {
      $mappings = array_merge($mappings, array(
        // Currently not supported:
        // 'vat_id' => 'http://specs.nic.cz/attr/contact/ident/vat_id',
        // 'vat' => 'http://specs.nic.cz/attr/contact/vat',
        'billing_street1' => 'http://specs.nic.cz/attr/addr/bill/street',
        'billing_street2' => 'http://specs.nic.cz/attr/addr/bill/street2',
        'billing_city' => 'http://specs.nic.cz/attr/addr/bill/city',
        'billing_postal_code' => 'http://specs.nic.cz/attr/addr/bill/pc',
        'billing_country' => 'http://specs.nic.cz/attr/addr/bill/cc',
        'billing_zone' => 'http://specs.nic.cz/attr/addr/bill/sp',
      ));
    }

    if (!empty($enabled['shipping'])) {
      $mappings = array_merge($mappings, array(
        'shipping_street1' => 'http://specs.nic.cz/attr/addr/ship/street',
        'shipping_street2' => 'http://specs.nic.cz/attr/addr/ship/street2',
        'shipping_city' => 'http://specs.nic.cz/attr/addr/ship/city',
        'shipping_postal_code' => 'http://specs.nic.cz/attr/addr/ship/pc',
        'shipping_country' => 'http://specs.nic.cz/attr/addr/ship/cc',
        'shipping_zone' => 'http://specs.nic.cz/attr/addr/ship/sp',
      ));
    }
  }
  // remove field which are not enabled in UC
  $address_fields = array('first_name', 'last_name', 'company', 'phone', 'street1', 'street2', 'city', 'postal_code', 'state', 'country');
  foreach ($address_fields as $key) {
    if (!uc_address_field_enabled($key)) {
      unset($mappings[$key], $mappings["billing_$key"], $mappings["shipping_$key"]);
    }
  }

  return $mappings;
}

/**
 * Returns ISO 3166-1 numeric code used by Ubercart as country identifier.
 *
 * @param string $iso2
 * @return int numeric 3
 */
function mojeid_uc_addresses_supported_country($iso2) {
  $iso2 = strtoupper($iso2);
  $countries = _mojeid_uc_addresses_countries();
  return isset($countries[$iso2]) ? $countries[$iso2] : FALSE;
}


/**
 * Returns array of ISO_3166-1 iso2 => numeric3 country codes supported by
 * Ubercart (they must be enabled in the Ubercart administration).
 *
 * @staticvar array $countries
 * @return array
 */
function _mojeid_uc_addresses_countries() {
  static $countries = NULL;
  if (is_null($countries)) {
    $countries = array();
    $result = db_query('SELECT country_id AS num3, country_iso_code_2 AS iso2 FROM {uc_countries}');
    while ($c = db_fetch_object($result)) {
      $countries[$c->iso2] = $c->num3;
    }
  }
  return $countries;
}

/**
 * Admin settings form.
 */
function mojeid_uc_addresses_admin_settings($form_state) {
  $form = array();

  $form['mojeid_uc_addresses'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Addresses to import'),
    '#options' => array(
      'main' => t('Main address'),
      'billing' => t('Billing address'),
      'shipping' => t('Shipping address'),
    ),
    '#default_value' => variable_get('mojeid_uc_addresses', array()),
    '#description' => t('Enable which addresses to import during user login, when using mojeID.'),
  );

  return system_settings_form($form);
}
